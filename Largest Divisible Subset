class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        int dp[n];
        dp[0] = 1;
        int maxx = 1;
        sort(nums.begin(),nums.end());
        int prev = nums[0];
        for(int i = 1; i<n; i++){
            dp[i] = 1;
            for(int j = 0; j<i; j++){
                // cout<<nums[i]<<" "<<nums[j]<<" "<<dp[i]<<" "<<dp[j]<<endl; 
                if(dp[i]<dp[j]+1&&nums[i]%nums[j]==0){
                    dp[i] = dp[j]+1;
                    // cout<<dp[1]<<endl;
                }   
            }
            if(maxx<dp[i]){
                maxx = dp[i];
                prev = nums[i];
            }
        }
        vector<int>v;
        for(int i = n-1; i>=0; i--){
            // cout<<dp[i]<<" "; 
            if(maxx==dp[i]&&prev%nums[i]==0){
                v.push_back(nums[i]);
                maxx--;
                prev = nums[i];
            }
        }
        return v;
        // cout<<endl;
        
    }
};
